"use strict";(self.webpackChunkclassic=self.webpackChunkclassic||[]).push([[9969],{9459:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>n,metadata:()=>a,toc:()=>c});var i=r(4848),t=r(8453);const n={sidebar_position:1},s="Introduction",a={id:"proof-aggregator/indroduction",title:"Introduction",description:"Now there are a variety of Zero Knowledge Proof Systems in the Ethereum ecology. Paring-based systems like Groth16, Halo2-KZG, and Hash-based systems like ZK-STARK, Plonky2, all these proof systems' verification overhead are still relatively high for the time being.",source:"@site/docs/proof-aggregator/indroduction.md",sourceDirName:"proof-aggregator",slug:"/proof-aggregator/indroduction",permalink:"/docs/proof-aggregator/indroduction",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/proof-aggregator/indroduction.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Proof-Aggregator",permalink:"/docs/category/proof-aggregator"},next:{title:"Architecture",permalink:"/docs/proof-aggregator/architecture"}},l={},c=[{value:"The Lifetime of Proof",id:"the-lifetime-of-proof",level:2},{value:"Proofs Overhead",id:"proofs-overhead",level:2},{value:"Off-chain Computation",id:"off-chain-computation",level:3},{value:"On-chain Verification",id:"on-chain-verification",level:3},{value:"Proofs Aggregation Challenge",id:"proofs-aggregation-challenge",level:2},{value:"End Game: A Turing Complete ZK-VM for proof recursion",id:"end-game-a-turing-complete-zk-vm-for-proof-recursion",level:2},{value:"Leveraging The Power Of Type-1 ZK-EVM",id:"leveraging-the-power-of-type-1-zk-evm",level:3},{value:"Verify Your ZKP On Chain By EVM Bytecode",id:"verify-your-zkp-on-chain-by-evm-bytecode",level:3},{value:"Exclusive Features",id:"exclusive-features",level:2},{value:"Cryptography Security",id:"cryptography-security",level:3},{value:"Permissionless",id:"permissionless",level:3},{value:"Extremely Low Gas Overhead",id:"extremely-low-gas-overhead",level:3},{value:"Use Cases",id:"use-cases",level:2}];function h(e){const o={a:"a",h1:"h1",h2:"h2",h3:"h3",img:"img",p:"p",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(o.h1,{id:"introduction",children:"Introduction"}),"\n",(0,i.jsxs)(o.p,{children:["Now there are a variety of Zero Knowledge Proof Systems in the Ethereum ecology. Paring-based systems like Groth16, ",(0,i.jsx)(o.a,{href:"https://github.com/privacy-scaling-explorations/halo2",children:"Halo2-KZG"}),", and Hash-based systems like ",(0,i.jsx)(o.a,{href:"https://github.com/starkware-libs/stone-prover",children:"ZK-STARK"}),", ",(0,i.jsx)(o.a,{href:"https://github.com/0xPolygonZero/plonky2",children:"Plonky2"}),", all these proof systems' verification overhead are still relatively ",(0,i.jsx)(o.strong,{children:"high"})," for the time being."]}),"\n",(0,i.jsx)(o.p,{children:"Reducing ZKP Verification's Overhead By Leveraging Type1 ZK-EVM & ZK-SPV"}),"\n",(0,i.jsx)(o.h2,{id:"the-lifetime-of-proof",children:"The Lifetime of Proof"}),"\n",(0,i.jsx)(o.h2,{id:"proofs-overhead",children:"Proofs Overhead"}),"\n",(0,i.jsx)(o.p,{children:"The overhead of Zero Knowledge Proofs is divided into the following two parts:"}),"\n",(0,i.jsx)(o.h3,{id:"off-chain-computation",children:"Off-chain Computation"}),"\n",(0,i.jsxs)(o.p,{children:["When it comes to the scenario of large-scale continuation proof(",(0,i.jsx)(o.a,{href:"https://worldcoin.org/blog/engineering/intro-to-zkml",children:"ZKML"}),",",(0,i.jsx)(o.a,{href:"https://blog.axiom.xyz/what-is-a-zk-coprocessor/",children:"ZK Coprocessor"})," etc.)"]}),"\n",(0,i.jsx)(o.h3,{id:"on-chain-verification",children:"On-chain Verification"}),"\n",(0,i.jsx)(o.h2,{id:"proofs-aggregation-challenge",children:"Proofs Aggregation Challenge"}),"\n",(0,i.jsx)(o.p,{children:"Proofs Aggregation Scheme for different ZKP Systems and development tools is much more complex than aggregating the proofs for the same ZKP System & development tool."}),"\n",(0,i.jsxs)(o.p,{children:["For example, if you are a Halo2-KZG based ZK developer, you can easily aggregate the Proofs generated by Halo2-KZG to reduce gas cost of proofs' verification ",(0,i.jsx)(o.a,{href:"https://github.com/privacy-scaling-explorations/snark-verifier/blob/371ddb59064080170cd2c77fc84ec4d8abbe4a43/snark-verifier/examples/evm-verifier-with-accumulator.rs#L603",children:"by utilizing the aggregation circuit in snark-verifier"})]}),"\n",(0,i.jsx)(o.p,{children:(0,i.jsx)(o.img,{alt:"Halo2 Proof Agg Scheme",src:r(5910).A+"",width:"1452",height:"462"})}),"\n",(0,i.jsxs)(o.p,{children:["If you plan to aggregate proofs from different KZP Systems by a specific aggregation circuit, this would be a very ",(0,i.jsx)(o.a,{href:"https://eprint.iacr.org/2020/499",children:"hard cryptography challenge"})]}),"\n",(0,i.jsx)(o.h2,{id:"end-game-a-turing-complete-zk-vm-for-proof-recursion",children:"End Game: A Turing Complete ZK-VM for proof recursion"}),"\n",(0,i.jsx)(o.h3,{id:"leveraging-the-power-of-type-1-zk-evm",children:"Leveraging The Power Of Type-1 ZK-EVM"}),"\n",(0,i.jsx)(o.h3,{id:"verify-your-zkp-on-chain-by-evm-bytecode",children:"Verify Your ZKP On Chain By EVM Bytecode"}),"\n",(0,i.jsxs)(o.p,{children:["Many ZKP development tools have their own solidity/yul code automation generator, like Halo2-KZG's ",(0,i.jsx)(o.a,{href:"https://github.com/privacy-scaling-explorations/snark-verifier",children:"snark-verifier"}),", ",(0,i.jsx)(o.a,{href:"https://docs.circom.io/getting-started/proving-circuits/#verifying-from-a-smart-contract",children:"circom"}),",",(0,i.jsx)(o.a,{href:"https://docs.gnark.consensys.io/HowTo/prove#verify-a-proof-on-ethereum",children:"gnark"})]}),"\n",(0,i.jsx)(o.h2,{id:"exclusive-features",children:"Exclusive Features"}),"\n",(0,i.jsx)(o.h3,{id:"cryptography-security",children:"Cryptography Security"}),"\n",(0,i.jsxs)(o.p,{children:["The system is purely built ",(0,i.jsx)(o.strong,{children:"based on existing Zero Knowledge Proof Primitives"}),". The correctness of the proofs aggregation ",(0,i.jsx)(o.strong,{children:"does not be guaranteed or trusted by any third-party consensus layer"})," till you verify the proofs on your destination side"]}),"\n",(0,i.jsx)(o.h3,{id:"permissionless",children:"Permissionless"}),"\n",(0,i.jsx)(o.p,{children:"The platform will be an open network for Proof Submitter, you just need to deploy your Proof verification solidity/yul code to the network and submit the proof to execute your own verification smart contract"}),"\n",(0,i.jsx)(o.h3,{id:"extremely-low-gas-overhead",children:"Extremely Low Gas Overhead"}),"\n",(0,i.jsx)(o.p,{children:"Gas costs will be reduced by at least multiples, The more proofs are aggregated, the more times the cost is reduced."}),"\n",(0,i.jsx)(o.h2,{id:"use-cases",children:"Use Cases"})]})}function d(e={}){const{wrapper:o}={...(0,t.R)(),...e.components};return o?(0,i.jsx)(o,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5910:(e,o,r)=>{r.d(o,{A:()=>i});const i=r.p+"assets/images/proof-agg-hard-e5466ad7ad903e601e08568c76d5b932.jpg"},8453:(e,o,r)=>{r.d(o,{R:()=>s,x:()=>a});var i=r(6540);const t={},n=i.createContext(t);function s(e){const o=i.useContext(n);return i.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function a(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(n.Provider,{value:o},e.children)}}}]);